https://www.geeksforgeeks.org/comparable-vs-comparator-in-java/
https://www.geeksforgeeks.org/g-fact-31-java-is-strictly-pass-by-value/
https://beginnersbook.com/2013/12/java-string-compareto-method-example/
https://www.geeksforgeeks.org/list-interface-java-examples/
https://www.geeksforgeeks.org/linked-list-in-java/
https://www.geeksforgeeks.org/java-util-vector-class-java/
https://www.geeksforgeeks.org/stack-class-in-java/
https://www.geeksforgeeks.org/priorityqueue-comparator-method-in-java/'
https://www.geeksforgeeks.org/priority-queue-class-in-java-2/
https://stackoverflow.com/questions/11003155/change-priorityqueue-to-max-priorityqueue
https://www.geeksforgeeks.org/hashset-in-java/
https://www.geeksforgeeks.org/linkedhashset-in-java-with-examples/
https://www.geeksforgeeks.org/sortedset-java-examples/
https://stackoverflow.com/questions/19820562/difference-between-navigableset-sortedset-and-treeset-in-java
https://www.geeksforgeeks.org/treeset-in-java-with-examples/
TreeSet uses Comparator interface by default

treeSet in descending order
SortedSet<String> tree=new TreeSet<String>(Comparator.reverseOrder());
https://stackoverflow.com/questions/29699103/treeset-constructor-with-comparator-parameter
https://github.com/callicoder/java-collections-examples/tree/master/
https://www.geeksforgeeks.org/write-through-and-write-back-in-cache/
https://www.geeksforgeeks.org/thread-pools-java/
https://www.geeksforgeeks.org/concurrenthashmap-in-java/
https://www.javatpoint.com/collections-in-java
https://www.geeksforgeeks.org/exceptions-in-java/
https://www.javatpoint.com/concurrentmodificationexception-in-java#:~:text=The%20ConcurrentModificationException%20occurs%20when%20an,thread%20is%20iterating%20over%20it.
https://www.geeksforgeeks.org/copyonwritearraylist-in-java/#:~:text=CopyOnWriteArrayList%3A%20CopyOnWriteArrayList%20class%20is%20introduced,by%20making%20a%20fresh%20copy.&text=It%20is%20thread%2Dsafe%20version%20of%20ArrayList.

ArrayList Vs LinkedList
1) Search: ArrayList search operation is pretty fast compared to the LinkedList search operation. get(int index) in ArrayList gives the performance of O(1) while LinkedList performance is O(n).

Reason: ArrayList maintains index based system for its elements as it uses array data structure implicitly which makes it faster for searching an element in the list. On the other side LinkedList implements doubly linked list which requires the traversal through all the elements for searching an element.

2) Deletion: LinkedList remove operation gives O(1) performance while ArrayList gives variable performance: O(n) in worst case (while removing first element) and O(1) in best case (While removing last element).


Conclusion: LinkedList element deletion is faster compared to ArrayList.

Reason: LinkedListâ€™s each element maintains two pointers (addresses) which points to the both neighbor elements in the list. Hence removal only requires change in the pointer location in the two neighbor nodes (elements) of the node which is going to be removed. While In ArrayList all the elements need to be shifted to fill out the space created by removed element.

3) Inserts Performance: LinkedList add method gives O(1) performance while ArrayList gives O(n) in worst case. Reason is same as explained for remove.

4) Memory Overhead: ArrayList maintains indexes and element data while LinkedList maintains element data and two pointers for neighbor nodes hence the memory consumption is high in LinkedList comparatively.

Java Interview related
Question:   Given getters and setters,how would u conserve OO priciple such as encapsulation and abstraction,so that we cant change the state of the object.
for eg,we can do a get and then we get the object and then we can set a value to that object using set method,so the state of the object changes.Asked for Collection of String
and Collection of Custom object.
singleton pattern multithreading

List<User> result = persons.stream()
                .filter(person -> person.getName().startsWith("J"))
                .collect(Collectors.toList());
                
                
                to sort this list by age,u can implement a comparable interface with age inside User class
                
                in java 8 also u can do
                studentlist.sort((Student s1, Student s2)->s2.getName().compareTo(s1.getName()));this is for reverse order
                studentlist.sort((Student s1, Student s2)->s1.getAge()-s2.getAge());   (normal order)
                
                List<Integer> numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);
//get list of unique squares
List<Integer> squaresList = numbers.stream().map( i -> i*i).distinct().collect(Collectors.toList());

        

https://dzone.com/articles/java-getter-and-setter-basics-common-mistakes-and
Info about shallow copy of ArrayList or Collections,the default clone()
https://yunmingzhang.wordpress.com/2014/01/08/making-shallow-copies-for-java-arraylist-collections-objects/#:~:text=In%20the%20case%20of%20an,1)%2C%20you%20modify%20copy.


Final variable
https://www.geeksforgeeks.org/final-keyword-java/
value is constant.for state,if its a final reference variable,then the reference cant be changes,reassigning cant be done but internal state at that reference can be changed.that is we can add or remove elements at that reference

Immutable class in Java
https://www.geeksforgeeks.org/create-immutable-class-java/
The content of object cant be changed after object creation
why we declare final variables in immutable class-the value of variables cant be changed after object creation

Suppose we have final List<Integer> list=new ArrayList<Integer>();

now during the program somewhere i change to List<Integer> list=new ArrayList<Integer>();
again so its a compiler,we are changing the reference of the variable.

Immutable class having a mutable object
https://dzone.com/articles/how-to-create-an-immutable-class-in-java

https://www.geeksforgeeks.org/singleton-class-java/

Method overloading with null argements

void show(String s)
void show(Object s)

String one will be called more specific





void show(Integer a)
void show(String s)
void show(Object s)


now here specific is Integer and String so compiler confused

A a =new A();
a.show(null);

Answer is compiler will be confused.it will give compiler error.
way to avoid this is explicitly typecast
show( (Object) null);
show( (Integer) null);
show( (String) null);

Size of int and Integer
int is a primitive data type which takes 32 bits(4 bytes) to store.
Integer is an object which takes 128 bits (16 bytes) to store int value.

When we creates new Integer using new Operator it allocates memory as per follows.

Class Object(32 bits) - which consist of a pointer to the class information, which describes the object in our case its point to java.lang.Integer class

Flags (32 bits)- It is collection of flags that describes the state of object. Like is it has hash-code, is it array or not i.e. its Shape.

Lock (32 bits) - It stores synchronization information of object. whether the object currently synchronized or not.

Above 3 points are called as metadata of an Object.

Lastly metadata is followed by the Object data (32 bits) itself. In case of Integer its single int value.
All the above explanation is as per 32 bit processor architecture. It can differ from JVM version and vendor.


max size of ArrayList-
The interface however defines the size() method, which returns an int.
Returns the number of elements in this list. If this list contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE.
So, no limit, but after you reach Integer.MAX_VALUE, the behaviour of the list changes a bit
ArrayList (which is tagged) is backed by an array, and is limited to the size of the array - i.e. Integer.MAX_VALUE
2^31-1 = 2147483647

For HashSet, LinkedHashSet, and EnumSet the add(), remove() and contains() operations cost constant O(1) time. Thanks to the internal HashMap implementation. Likewise, the TreeSet has O(log(n)) time complexity for the operations listed for the previous group
For ArrayList search takes o(n) time

https://dzone.com/articles/performance-analysis-of-arraylist-and-linkedlist-i
working of hashmap in java

what is kafka.is it pull or push mechanism?why pull mechanism?why pub sub architecture?who manages the messages(broker) who manages the broker failover(zookeeper)
what is spring boot actuators
spring boot version 2.0
spring boot atuators supported from 2.0
what is promethues

https://dzone.com/articles/how-does-singleton-bean-serve-multiple-requests-at
what is method overloading and overriding 
difference between interface and abstract class in java 8
abstract class has a constructor.how do u invoke it?
lets say a parent class A
and child class B
A a=new B();
how does the parent class constructor invoke?
its through super keyword.

lets say class a
{
int x=10;
void show()
{
}
}
lets say class B
class B extends class A
{
int x=20;
void show()
{
}
}

now A a=new B();
a.x?/ value

it will print as 10.when we override only methds get overriden not the member variables


different types of scope in spring bean
difference between update and merge in hibernate

Hibernate handles persisting any changes to objects in the session when the session is flushed. update can fail if an instance of the object is already in the session. Merge should be used in that case. It merges the changes of the detached object with an object in the session, if it exists.

Update: if you are sure that the session does not contains an already persistent instance with the same identifier,then use update to save the data in hibernate

Merge: if you want to save your modifications at any time with out knowing about the state of an session, then use merge() in hibernate.


Give example of Many to many relationship with notation
different types of cascade examoles in hibernate


Kafka
https://www.oreilly.com/library/view/kafka-the-definitive/9781491936153/ch04.html
Current offset -> Sent Records -> This is used to avoid resending same records again to the same consumer. Committed offset -> Processed Records -> It is used to avoid resending same records to a new consumer in the event of partition rebalance.


List is java.util
Object is java.lang
Comparable java.lang Comparator java.util
System.out.print
Ssytem is final class.Print Stream out is static memeber variable of Syatem class and print is method of PrintStream class

https://www.geeksforgeeks.org/g-fact-31-java-is-strictly-pass-by-value/
How do u avoid concurrent modification exception in java?

ArrayList, LinkedList, HashSet,LinkedHashset and TreeSet in Collection Interface and HashMap,LinkedHashMap and Treemap are all non-synchronized.

Vector HashTable in Collection Interface is Synchronized
Diffference between HashTable and Hashmap
https://howtodoinjava.com/interview-questions/useful-java-collection-interview-questions/
difference between enumerator and iterator
difference between iterator and listiterator
https://www.tutorialspoint.com/difference-between-peek-poll-and-remove-method-of-queue-interface-in-java
swap two nos without addition division
to check a valid ip adreess

https://beginnersbook.com/2013/05/java-finally-return/
https://www.baeldung.com/hibernate-one-to-many
https://www.baeldung.com/jpa-cascade-types
https://www.baeldung.com/hibernate-lazy-eager-loading
https://www.baeldung.com/hibernate-many-to-many
https://www.journaldev.com/3633/hibernate-interview-questions-and-answers#hibernate-annotations


