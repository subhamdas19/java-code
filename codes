https://www.geeksforgeeks.org/comparable-vs-comparator-in-java/
https://www.geeksforgeeks.org/g-fact-31-java-is-strictly-pass-by-value/
https://beginnersbook.com/2013/12/java-string-compareto-method-example/
https://www.geeksforgeeks.org/list-interface-java-examples/
https://www.geeksforgeeks.org/linked-list-in-java/
https://www.geeksforgeeks.org/java-util-vector-class-java/
https://www.geeksforgeeks.org/stack-class-in-java/
https://www.geeksforgeeks.org/priorityqueue-comparator-method-in-java/'
https://www.geeksforgeeks.org/priority-queue-class-in-java-2/
https://stackoverflow.com/questions/11003155/change-priorityqueue-to-max-priorityqueue
https://www.geeksforgeeks.org/hashset-in-java/
https://www.geeksforgeeks.org/linkedhashset-in-java-with-examples/
https://www.geeksforgeeks.org/sortedset-java-examples/
https://stackoverflow.com/questions/19820562/difference-between-navigableset-sortedset-and-treeset-in-java
https://www.geeksforgeeks.org/treeset-in-java-with-examples/
TreeSet uses Comparator interface by default

treeSet in descending order
SortedSet<String> tree=new TreeSet<String>(Comparator.reverseOrder());
https://stackoverflow.com/questions/29699103/treeset-constructor-with-comparator-parameter
https://github.com/callicoder/java-collections-examples/tree/master/
https://www.geeksforgeeks.org/write-through-and-write-back-in-cache/
https://www.geeksforgeeks.org/thread-pools-java/
https://www.geeksforgeeks.org/concurrenthashmap-in-java/
https://www.javatpoint.com/collections-in-java
https://www.geeksforgeeks.org/exceptions-in-java/
https://www.javatpoint.com/concurrentmodificationexception-in-java#:~:text=The%20ConcurrentModificationException%20occurs%20when%20an,thread%20is%20iterating%20over%20it.
https://www.geeksforgeeks.org/copyonwritearraylist-in-java/#:~:text=CopyOnWriteArrayList%3A%20CopyOnWriteArrayList%20class%20is%20introduced,by%20making%20a%20fresh%20copy.&text=It%20is%20thread%2Dsafe%20version%20of%20ArrayList.



Java Interview related
Question:   Given getters and setters,how would u conserve OO priciple such as encapsulation and abstraction,so that we cant change the state of the object.
for eg,we can do a get and then we get the object and then we can set a value to that object using set method,so the state of the object changes.Asked for Collection of String
and Collection of Custom object.


List<User> result = persons.stream()
                .filter(person -> person.getName().startsWith("J"))
                .collect(Collectors.toList());
                
                
                to sort this list by age,u can implement a comparable interface with age inside User class
                
                in java 8 also u can do
                studentlist.sort((Student s1, Student s2)->s2.getName().compareTo(s1.getName()));this is for reverse order
                studentlist.sort((Student s1, Student s2)->s1.getAge()-s2.getAge());   (normal order)

        

https://dzone.com/articles/java-getter-and-setter-basics-common-mistakes-and
Info about shallow copy of ArrayList or Collections,the default clone()
https://yunmingzhang.wordpress.com/2014/01/08/making-shallow-copies-for-java-arraylist-collections-objects/#:~:text=In%20the%20case%20of%20an,1)%2C%20you%20modify%20copy.


Final variable
https://www.geeksforgeeks.org/final-keyword-java/
value is constant.for state,if its a final reference variable,then the reference cant be changes,reassigning cant be done but internal state at that reference can be changed.that is we can add or remove elements at that reference

Immutable class in Java
https://www.geeksforgeeks.org/create-immutable-class-java/
The content of object cant be changed after object creation
why we declare final variables in immutable class-the value of variables cant be changed after object creation

Suppose we have final List<Integer> list=new ArrayList<Integer>();

now during the program somewhere i change to List<Integer> list=new ArrayList<Integer>();
again so its a compiler,we are changing the reference of the variable.

Immutable class having a mutable object
https://dzone.com/articles/how-to-create-an-immutable-class-in-java

https://www.geeksforgeeks.org/singleton-class-java/

Method overloading with null argements
void show(Integer a)
void show(String s)
void show(Object s)

A a =new A();
a.show(null);

Answer is compiler will be confused.it will give compiler error.
way to avoid this is explicitly typecast
show( (Object) null);
show( (Integer) null);
show( (String) null);

Size of int and Integer
int is a primitive data type which takes 32 bits(4 bytes) to store.
Integer is an object which takes 128 bits (16 bytes) to store int value.

When we creates new Integer using new Operator it allocates memory as per follows.

Class Object(32 bits) - which consist of a pointer to the class information, which describes the object in our case its point to java.lang.Integer class

Flags (32 bits)- It is collection of flags that describes the state of object. Like is it has hash-code, is it array or not i.e. its Shape.

Lock (32 bits) - It stores synchronization information of object. whether the object currently synchronized or not.

Above 3 points are called as metadata of an Object.

Lastly metadata is followed by the Object data (32 bits) itself. In case of Integer its single int value.
All the above explanation is as per 32 bit processor architecture. It can differ from JVM version and vendor.


max size of ArrayList-
The interface however defines the size() method, which returns an int.
Returns the number of elements in this list. If this list contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE.
So, no limit, but after you reach Integer.MAX_VALUE, the behaviour of the list changes a bit
ArrayList (which is tagged) is backed by an array, and is limited to the size of the array - i.e. Integer.MAX_VALUE
2^31-1 = 2147483647

For HashSet, LinkedHashSet, and EnumSet the add(), remove() and contains() operations cost constant O(1) time. Thanks to the internal HashMap implementation. Likewise, the TreeSet has O(log(n)) time complexity for the operations listed for the previous group
For ArrayList search takes o(n) time

https://dzone.com/articles/performance-analysis-of-arraylist-and-linkedlist-i
